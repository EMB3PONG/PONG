/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "mblaze_nt_types.h"
#include "xparameters.h"
#include "xgpio.h"
#include "math.h"

void print(char *str);

int main()
{
	int move; //2 = UP 1 = STOP 0 = DOWN
	int going_right;
	uint32_t bat_desired_center = 0;
	uint32_t ball_x = 0;
	uint32_t ball_y = 0;
	uint32_t bat_l = 0;
	uint32_t bat_r = 0;
	uint32_t last_ball_pos = 0;
//	uint32_t *ptr_pushButtons, *ptr_LEDs, *ptr_ballColor;
	volatile uint32_t* ptr_pushButtons = ((volatile uint32_t*)(XPAR_PUSH_BUTTONS_3BIT_BASEADDR));
	volatile uint32_t* ptr_LEDs = ((volatile uint32_t*)(XPAR_LEDS_8BIT_BASEADDR));
	volatile uint32_t* ptr_ballColor = ((volatile uint32_t*)(XPAR_BALL_COLOR_O_BASEADDR));
	volatile uint32_t* ptr_bat_pos = ((volatile uint32_t*)(XPAR_BATPOS_L_R_BASEADDR));
	volatile uint32_t* ptr_ball_pos = ((volatile uint32_t*)(XPAR_BALLPOS_XY_BASEADDR));

    init_platform();

    print("Hello World\n\r");

    while(1){

       	int i,w,len;
       	len = strlen(ptr_ball_pos);
    	    for(i=0;i<len;i++)
    	    {
    	    	w = pow(2,i);
    	    	if(i < len/2) {
    	    		ball_y += ptr_ball_pos[i]*w;
    	    		bat_r += ptr_bat_pos[i]*w;
    	    	}
    	    	else {
    	    		ball_x += ptr_ball_pos[i]*w;
    	    		bat_l += ptr_bat_pos[i]*w;
    	    	}
       	    }

    	  last_ball_pos = ball_x;

    	  if (last_ball_pos > (ball_x + 1)) {
    		  if (going_right == 0) {
    			  *ptr_ballColor += 5;
    		  }
    		  going_right = 1;
    	  }
    	  else if (last_ball_pos < (ball_x - 1)) {
    		  if (going_right == 1) {
    			  *ptr_ballColor += 5;
    		  }
    		  going_right = 0;
    	  }

    	  bat_desired_center = ball_y+10;
    	  if (bat_desired_center > (bat_r+50)) {
    		  if (bat_r > 479) {
    			  move = 1; // STOP
    		  }
    		  else {
    			  move = 0; //GO DOWN
    		  }
    	  }
    	  else if (bat_desired_center < (bat_r+50)) {
    		  if (bat_r < 1) {
    			  move = 1; //STOP
    		  }
    		  else {
    			  move = 2; //GO UP
    		  }
    	  }

    	//counter++;
    	//*ptr_ballColor = counter;




    	// Set LEDs according to push buttons
    	*ptr_LEDs = *ptr_pushButtons;

    	// Delay
    	for (i = 0;  i < 500000; ++ i);
    }

    return 0;
}
